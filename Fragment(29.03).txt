#version 430

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;    
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

out vec4 daColor;
in vec3 theColor;
in vec3 theNormal;
in vec3 thePosition;
in vec2 Texcoord;
in vec4 LightSpacePos;

uniform Material material;
uniform Light light;
uniform sampler2D diffuse;
uniform sampler2DShadow depth_texture; 
uniform sampler2D specular;

uniform mat4 modelToWorldMatrix;
uniform vec3 eyePositionWorld;

void main()
{ 	
  vec3 FNormal = normalize(mat3(modelToWorldMatrix)* theNormal);
  vec3 FPosition= vec3(modelToWorldMatrix * vec4(thePosition ,1.0)); 
  
  //Ambient
  vec3 ambientLight = light.ambient;// * material.ambient

  //Diffuse
  vec3 lightVector= normalize(light.position-FPosition);
  float Brightness=clamp(dot(lightVector,FNormal),0,1);
  vec3 diffuseLight=vec3(light.diffuse * (Brightness ));//Brightness*material.diffuse
  
  //Specular
  vec3 Reflaction = reflect(-lightVector,FNormal);
  vec3 eyeVector= normalize(eyePositionWorld-FPosition); 
  float spec=clamp(dot(Reflaction,eyeVector),0,1);
  spec=pow(spec, material.shininess);
  vec3 specularLight=vec3(light.specular *(spec ));//* material.specular
  specularLight=clamp(specularLight,0,1);

  //shadow
  float sum=0;
  float shadow = 0.0;
  //vec2 texelSize = 1.0 / textureSize(depth_texture, 0);
  for(int x = -2; x <= 2; ++x)
    {
        for(int y = -2; y <= 2; ++y)
        {
			sum += textureProjOffset(depth_texture,LightSpacePos,ivec2(x,y));        
        }    
    }
    sum /= 50.0;
  shadow=0.3+sum;


 //if(LightSpacePos.z > 1.0) //far plane issue!
       // shadow = 1.0;

  vec3 color = texture(diffuse, Texcoord).rgb;
  vec3 LightingShadow= (diffuseLight+specularLight)*shadow;
  vec3 TotalColor=(ambientLight+LightingShadow)*color;
  daColor= vec4(TotalColor,1.0);
};